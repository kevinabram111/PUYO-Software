#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PUYO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PUYO_CASHIER")]
	public partial class PUYODataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMaster_Transaction(Master_Transaction instance);
    partial void UpdateMaster_Transaction(Master_Transaction instance);
    partial void DeleteMaster_Transaction(Master_Transaction instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProduct_Type(Product_Type instance);
    partial void UpdateProduct_Type(Product_Type instance);
    partial void DeleteProduct_Type(Product_Type instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    #endregion
		
		public PUYODataContext() : 
				base(global::PUYO.Properties.Settings.Default.PUYO_CASHIERConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PUYODataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PUYODataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PUYODataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PUYODataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Master_Transaction> Master_Transactions
		{
			get
			{
				return this.GetTable<Master_Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Product_Type> Product_Types
		{
			get
			{
				return this.GetTable<Product_Type>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Master_Transaction")]
	public partial class Master_Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Master_Transaction_ID;
		
		private System.DateTime _Master_Transaction_Date;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaster_Transaction_IDChanging(string value);
    partial void OnMaster_Transaction_IDChanged();
    partial void OnMaster_Transaction_DateChanging(System.DateTime value);
    partial void OnMaster_Transaction_DateChanged();
    #endregion
		
		public Master_Transaction()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master_Transaction_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Master_Transaction_ID
		{
			get
			{
				return this._Master_Transaction_ID;
			}
			set
			{
				if ((this._Master_Transaction_ID != value))
				{
					this.OnMaster_Transaction_IDChanging(value);
					this.SendPropertyChanging();
					this._Master_Transaction_ID = value;
					this.SendPropertyChanged("Master_Transaction_ID");
					this.OnMaster_Transaction_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master_Transaction_Date", DbType="Date NOT NULL")]
		public System.DateTime Master_Transaction_Date
		{
			get
			{
				return this._Master_Transaction_Date;
			}
			set
			{
				if ((this._Master_Transaction_Date != value))
				{
					this.OnMaster_Transaction_DateChanging(value);
					this.SendPropertyChanging();
					this._Master_Transaction_Date = value;
					this.SendPropertyChanged("Master_Transaction_Date");
					this.OnMaster_Transaction_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Master_Transaction_Transaction", Storage="_Transactions", ThisKey="Master_Transaction_ID", OtherKey="Master_Transaction_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Master_Transaction = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Master_Transaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Product_ID;
		
		private string _Product_Type_ID;
		
		private string _Product_Name;
		
		private decimal _Product_Price;
		
		private int _Product_Stock;
		
		private string _Barcode_Number;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<Product_Type> _Product_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_IDChanging(string value);
    partial void OnProduct_IDChanged();
    partial void OnProduct_Type_IDChanging(string value);
    partial void OnProduct_Type_IDChanged();
    partial void OnProduct_NameChanging(string value);
    partial void OnProduct_NameChanged();
    partial void OnProduct_PriceChanging(decimal value);
    partial void OnProduct_PriceChanged();
    partial void OnProduct_StockChanging(int value);
    partial void OnProduct_StockChanged();
    partial void OnBarcode_NumberChanging(string value);
    partial void OnBarcode_NumberChanged();
    #endregion
		
		public Product()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Product_Type = default(EntityRef<Product_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Type_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Type_ID
		{
			get
			{
				return this._Product_Type_ID;
			}
			set
			{
				if ((this._Product_Type_ID != value))
				{
					if (this._Product_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_Type_ID = value;
					this.SendPropertyChanged("Product_Type_ID");
					this.OnProduct_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Name
		{
			get
			{
				return this._Product_Name;
			}
			set
			{
				if ((this._Product_Name != value))
				{
					this.OnProduct_NameChanging(value);
					this.SendPropertyChanging();
					this._Product_Name = value;
					this.SendPropertyChanged("Product_Name");
					this.OnProduct_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Product_Price
		{
			get
			{
				return this._Product_Price;
			}
			set
			{
				if ((this._Product_Price != value))
				{
					this.OnProduct_PriceChanging(value);
					this.SendPropertyChanging();
					this._Product_Price = value;
					this.SendPropertyChanged("Product_Price");
					this.OnProduct_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Stock", DbType="Int NOT NULL")]
		public int Product_Stock
		{
			get
			{
				return this._Product_Stock;
			}
			set
			{
				if ((this._Product_Stock != value))
				{
					this.OnProduct_StockChanging(value);
					this.SendPropertyChanging();
					this._Product_Stock = value;
					this.SendPropertyChanged("Product_Stock");
					this.OnProduct_StockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barcode_Number", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Barcode_Number
		{
			get
			{
				return this._Barcode_Number;
			}
			set
			{
				if ((this._Barcode_Number != value))
				{
					this.OnBarcode_NumberChanging(value);
					this.SendPropertyChanging();
					this._Barcode_Number = value;
					this.SendPropertyChanged("Barcode_Number");
					this.OnBarcode_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Transaction", Storage="_Transactions", ThisKey="Product_ID", OtherKey="Product_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Type_Product", Storage="_Product_Type", ThisKey="Product_Type_ID", OtherKey="Product_Type_ID", IsForeignKey=true)]
		public Product_Type Product_Type
		{
			get
			{
				return this._Product_Type.Entity;
			}
			set
			{
				Product_Type previousValue = this._Product_Type.Entity;
				if (((previousValue != value) 
							|| (this._Product_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product_Type.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Product_Type.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._Product_Type_ID = value.Product_Type_ID;
					}
					else
					{
						this._Product_Type_ID = default(string);
					}
					this.SendPropertyChanged("Product_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product_Type")]
	public partial class Product_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Product_Type_ID;
		
		private string _Product_Type_Name;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_Type_IDChanging(string value);
    partial void OnProduct_Type_IDChanged();
    partial void OnProduct_Type_NameChanging(string value);
    partial void OnProduct_Type_NameChanged();
    #endregion
		
		public Product_Type()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Type_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Product_Type_ID
		{
			get
			{
				return this._Product_Type_ID;
			}
			set
			{
				if ((this._Product_Type_ID != value))
				{
					this.OnProduct_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_Type_ID = value;
					this.SendPropertyChanged("Product_Type_ID");
					this.OnProduct_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Type_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Type_Name
		{
			get
			{
				return this._Product_Type_Name;
			}
			set
			{
				if ((this._Product_Type_Name != value))
				{
					this.OnProduct_Type_NameChanging(value);
					this.SendPropertyChanging();
					this._Product_Type_Name = value;
					this.SendPropertyChanged("Product_Type_Name");
					this.OnProduct_Type_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Type_Product", Storage="_Products", ThisKey="Product_Type_ID", OtherKey="Product_Type_ID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Product_Type = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Product_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Transaction_ID;
		
		private string _Master_Transaction_ID;
		
		private string _Product_ID;
		
		private int _Quantity;
		
		private decimal _Total_Price;
		
		private string _Status;
		
		private EntityRef<Master_Transaction> _Master_Transaction;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransaction_IDChanging(string value);
    partial void OnTransaction_IDChanged();
    partial void OnMaster_Transaction_IDChanging(string value);
    partial void OnMaster_Transaction_IDChanged();
    partial void OnProduct_IDChanging(string value);
    partial void OnProduct_IDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnTotal_PriceChanging(decimal value);
    partial void OnTotal_PriceChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Transaction()
		{
			this._Master_Transaction = default(EntityRef<Master_Transaction>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Transaction_ID
		{
			get
			{
				return this._Transaction_ID;
			}
			set
			{
				if ((this._Transaction_ID != value))
				{
					this.OnTransaction_IDChanging(value);
					this.SendPropertyChanging();
					this._Transaction_ID = value;
					this.SendPropertyChanged("Transaction_ID");
					this.OnTransaction_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master_Transaction_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Master_Transaction_ID
		{
			get
			{
				return this._Master_Transaction_ID;
			}
			set
			{
				if ((this._Master_Transaction_ID != value))
				{
					if (this._Master_Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaster_Transaction_IDChanging(value);
					this.SendPropertyChanging();
					this._Master_Transaction_ID = value;
					this.SendPropertyChanged("Master_Transaction_ID");
					this.OnMaster_Transaction_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Total_Price
		{
			get
			{
				return this._Total_Price;
			}
			set
			{
				if ((this._Total_Price != value))
				{
					this.OnTotal_PriceChanging(value);
					this.SendPropertyChanging();
					this._Total_Price = value;
					this.SendPropertyChanged("Total_Price");
					this.OnTotal_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Master_Transaction_Transaction", Storage="_Master_Transaction", ThisKey="Master_Transaction_ID", OtherKey="Master_Transaction_ID", IsForeignKey=true)]
		public Master_Transaction Master_Transaction
		{
			get
			{
				return this._Master_Transaction.Entity;
			}
			set
			{
				Master_Transaction previousValue = this._Master_Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Master_Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Master_Transaction.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Master_Transaction.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Master_Transaction_ID = value.Master_Transaction_ID;
					}
					else
					{
						this._Master_Transaction_ID = default(string);
					}
					this.SendPropertyChanged("Master_Transaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Transaction", Storage="_Product", ThisKey="Product_ID", OtherKey="Product_ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Product_ID = value.Product_ID;
					}
					else
					{
						this._Product_ID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
